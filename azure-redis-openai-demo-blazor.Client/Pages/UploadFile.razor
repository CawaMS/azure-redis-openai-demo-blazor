@page "/file-upload"
@using Azure.Storage.Blobs
@using Azure.Identity
@inject IConfiguration Configuration
@inject BlobContainerClient blobContainerClient

<h3>File Upload</h3>

<InputFile OnChange="@HandleFileSelected" />

@if (uploading)
{
    <p>Uploading...</p>
}

@if (!string.IsNullOrEmpty(uploadResult))
{
    <p>@uploadResult</p>
}

@code {
    private bool uploading = false;
    private string uploadResult;



    private string BlobEndpointURL="";



    private string DefaultCredInfo="";

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            uploading = true;
            uploadResult = string.Empty;

            try
            {
                var connectionString = new Uri(Configuration["AzureStorageConnectionString"]);
                var containerName = Configuration["AzureStorageContainerName"];

                if (connectionString == null || string.IsNullOrEmpty(containerName))
                {
                    uploadResult = "Error uploading file: AzureStorageConnectionString or AzureStorageContainerName is not set in the configuration.";
                    // throw new ArgumentNullException("AzureStorageConnectionString or AzureStorageContainerName is not set in the configuration.");
                }

                // var credential = new DefaultAzureCredential();

                // string[] scopes = new string[] { "https://graph.microsoft.com/.default" };

                // try
                // {
                //     var token = await credential.GetTokenAsync(new Azure.Core.TokenRequestContext(scopes));
                //     DefaultCredInfo = token.Token;
                // }
                // catch (Exception ex)
                // {
                //     DefaultCredInfo = "Default Credential failure: " + ex.Message;
                // }

                // var blobServiceClient = new BlobServiceClient(connectionString, new DefaultAzureCredential());
                // var containerClient = blobServiceClient.GetBlobContainerClient(containerName);

                // BlobEndpointURL = blobServiceClient.Uri.ToString();

                // DefaultCredInfo = token.Token;

                // var blobClient = containerClient.GetBlobClient(file.Name);

                var blobClient = blobContainerClient.GetBlobClient(file.Name);

                using (var stream = file.OpenReadStream())
                {
                    await blobClient.UploadAsync(stream, true);
                }

                uploadResult = "File uploaded successfully!";
            }
            catch (Exception ex)
            {
                uploadResult = $"Error uploading file: {ex.Message}";
            }
            finally
            {
                uploading = false;
            }
        }
    }
   }